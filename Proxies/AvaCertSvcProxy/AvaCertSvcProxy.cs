#region Copyright
//
// All rights are reserved. Reproduction or transmission in whole or in part, in
// any form or by any means, electronic, mechanical or otherwise, is prohibited
// without the prior written consent of the copyright owner.
//
#endregion

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
//

namespace Avalara.AvaTax.Adapter.Proxies.AvaCertSvcProxy
{
    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/AvaCertSvc/*' />
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name = "AvaCertSvcSoap", Namespace = "http://avatax.avalara.com/services")]
    [XmlInclude(typeof(ProxyBaseResult))]
    [ComVisible(false)]
    public class ProxyAvaCertSvc : SoapHttpClientProtocol
    {
        /// <remarks/>
		public ProxySecurity Security;
		/// <remarks/>
		public ProxyProfile ProfileValue;
 
		/// <remarks/>
        internal ProxyAvaCertSvc() 
		{
			//not publicly creatable
		}

        /// <remarks/>
        [SOAPTraceRequest]
        [SoapHeaderAttribute("ProfileValue"), SoapHeaderAttribute("Security")]
        [SoapDocumentMethod("http://avatax.avalara.com/services/AddCustomer", RequestNamespace = "http://avatax.avalara.com/services", ResponseNamespace = "http://avatax.avalara.com/services", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public ProxyAddCustomerResult AddCustomer(ProxyAddCustomerRequest AddCustomerRequest)
        {
            object[] results = this.Invoke("AddCustomer", new object[] {
																	  AddCustomerRequest});

            return ((ProxyAddCustomerResult)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginAddCustomer(ProxyAddCustomerRequest AddCustomerRequest, AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddCustomer", new object[] {
															   AddCustomerRequest}, callback, asyncState);
        }

        /// <remarks/>
        public ProxyAddCustomerResult EndAddCustomer(IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProxyAddCustomerResult)(results[0]));
        }

        /// <remarks/>
        [SOAPTraceRequest]
        [SoapHeaderAttribute("ProfileValue"), SoapHeaderAttribute("Security")]
        [SoapDocumentMethod("http://avatax.avalara.com/services/InitiateExemptCert", RequestNamespace = "http://avatax.avalara.com/services", ResponseNamespace = "http://avatax.avalara.com/services", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public ProxyInitiateExemptCertResult InitiateExemptCert(ProxyInitiateExemptCertRequest InitiateExemptCertRequest)
        {
            object[] results = this.Invoke("InitiateExemptCert", new object[] {
																	  InitiateExemptCertRequest});

            return ((ProxyInitiateExemptCertResult)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginInitiateExemptCert(ProxyInitiateExemptCertRequest InitiateExemptCertRequest, AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InitiateExemptCert", new object[] {
															   InitiateExemptCertRequest}, callback, asyncState);
        }

        /// <remarks/>
        public ProxyInitiateExemptCertResult EndInitiateExemptCert(IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProxyInitiateExemptCertResult)(results[0]));
        }

        /// <remarks/>
        [SOAPTraceRequest]
        [SoapHeaderAttribute("ProfileValue"), SoapHeaderAttribute("Security")]
        [SoapDocumentMethod("http://avatax.avalara.com/services/GetExemptionCertificates", RequestNamespace = "http://avatax.avalara.com/services", ResponseNamespace = "http://avatax.avalara.com/services", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public ProxyGetExemptionCertificatesResult GetExemptionCertificates(ProxyGetExemptionCertificatesRequest GetExemptionCertificatesRequest)
        {
            object[] results = this.Invoke("GetExemptionCertificates", new object[] { GetExemptionCertificatesRequest});
            return ((ProxyGetExemptionCertificatesResult)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginGetExemptionCertificates(ProxyGetExemptionCertificatesRequest GetExemptionCertificatesRequest, AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetExemptionCertificates", new object[] { GetExemptionCertificatesRequest}, callback, asyncState);
        }

        /// <remarks/>
        public ProxyGetExemptionCertificatesResult EndGetExemptionCertificates(IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProxyGetExemptionCertificatesResult)(results[0]));
        }

        /// <remarks/>
        [SOAPTraceRequest]
        [SoapHeaderAttribute("ProfileValue"), SoapHeaderAttribute("Security")]
        [SoapDocumentMethod("http://avatax.avalara.com/services/Ping", RequestNamespace = "http://avatax.avalara.com/services", ResponseNamespace = "http://avatax.avalara.com/services", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public ProxyPingResult Ping(string Message)
        {
            object[] results = this.Invoke("Ping", new object[] {
																	Message});
            return ((ProxyPingResult)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginPing(string Message, AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Ping", new object[] {
															 Message}, callback, asyncState);
        }

        /// <remarks/>
        public ProxyPingResult EndPing(IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProxyPingResult)(results[0]));
        }

        /// <remarks/>
        [SOAPTraceRequest]
        [SoapHeaderAttribute("ProfileValue"), SoapHeaderAttribute("Security")]
        [SoapDocumentMethod("http://avatax.avalara.com/services/IsAuthorized", RequestNamespace = "http://avatax.avalara.com/services", ResponseNamespace = "http://avatax.avalara.com/services", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
        public ProxyIsAuthorizedResult IsAuthorized(string Operations)
        {
            object[] results = this.Invoke("IsAuthorized", new object[] {
																			Operations});
            return ((ProxyIsAuthorizedResult)(results[0]));
        }

        /// <remarks/>
        public IAsyncResult BeginIsAuthorized(string Operations, AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("IsAuthorized", new object[] {
																	 Operations}, callback, asyncState);
        }

        /// <remarks/>
        public ProxyIsAuthorizedResult EndIsAuthorized(IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ProxyIsAuthorizedResult)(results[0]));
        }

    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/AddCustomerRequest/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "AddCustomerRequest")]
    [ComVisible(false)]
    public class ProxyAddCustomerRequest : ProxyBaseRequest
    {
        /// <remarks/>
        public ProxyCustomer Customer;
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/AddCustomerResult/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "AddCustomerResult")]
    [ComVisible(false)]
    public class ProxyAddCustomerResult : ProxyBaseResult
    {
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/InitiateExemptCertRequest/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "InitiateExemptCertRequest")]
    [ComVisible(false)]
    public class ProxyInitiateExemptCertRequest : ProxyBaseRequest
    {
        /// <remarks/>
        public ProxyCustomer Customer;

        /// <remarks/>
        public ProxyCommunicationMode CommunicationMode;

        /// <remarks/>
        public string LocationCode;

        /// <remarks/>
        public string CustomMessage;

        /// <remarks/>
        public ProxyRequestType Type;
    }


    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/InitiateExemptCertResult/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "InitiateExemptCertResult")]
    [ComVisible(false)]
    public class ProxyInitiateExemptCertResult : ProxyBaseResult
    {
        /// <remarks/>
        public string TrackingCode;

        /// <remarks/>
        public string WizardLaunchUrl;
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/GetExemptionCertificatesRequest/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "GetExemptionCertificatesRequest")]
    [ComVisible(false)]
    public class ProxyGetExemptionCertificatesRequest : ProxyBaseRequest
    {
        /// <remarks/>
        public string CompanyCode;

        /// <remarks/>
        public string CustomerCode;

        /// <remarks/>
        // [XmlElement(DataType="date")]
        public DateTime FromDate;// = DateUtil.MinDate

        /// <remarks/>
        public DateTime ToDate;

        /// <remarks/>
        public string Region;
    }


    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/GetExemptionCertificatesResult/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "GetExemptionCertificatesResult")]
    [ComVisible(false)]
    public class ProxyGetExemptionCertificatesResult : ProxyBaseResult
    {
        /// <remarks/>
        public ProxyExemptionCertificate[] ExemptionCertificates;

        /// <remarks/>
        public int RecordCount;
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/ExemptionCertificate/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "ExemptionCertificate")]
    [ComVisible(false)]
    public class ProxyExemptionCertificate
    {
        /// <remarks/>
        public string AvaCertId;

        /// <remarks/>
        public ProxyJurisdiction[] Jurisdictions;
        
        /// <remarks/>
        public string[] CustomerCodes;
        
        /// <remarks/>
        public string CustomerType;
        
        /// <remarks/>
        public string LocationName;
        
        /// <remarks/>
        public string LocationCode;
        
        /// <remarks/>
        public ProxyCertificateStatus CertificateStatus;
        
        /// <remarks/>
        public ProxyReviewStatus ReviewStatus;
        
        /// <remarks/>
        public DateTime CreatedDate;
        
        /// <remarks/>
        public DateTime ModifiedDate;
        
        /// <remarks/>
        public DateTime ReceivedDate;
        
        /// <remarks/>
        public string BusinessName;
        
        /// <remarks/>
        public string Address1;
        
        /// <remarks/>
        public string Address2;
        
        /// <remarks/>
        public string City;
        
        /// <remarks/>
        public string Region;
        
        /// <remarks/>
        public string Country;
        
        /// <remarks/>
        public string PostalCode;
        
        /// <remarks/>
        public string Phone;
        
        /// <remarks/>
        public string Email;
        
        /// <remarks/>
        public string ExemptFormName;
        
        /// <remarks/>
        public string Custom1;

        /// <remarks/>
        public string Custom2;

        /// <remarks/>
        public string Custom3;

        /// <remarks/>
        public string SignerName;

        /// <remarks/>
        public string SignerTitle;
        
        /// <remarks/>
        public DateTime SignedDate;
        
        /// <remarks/>
        public string BusinessDescription;
        
        /// <remarks/>
        public string SellerPropertyDescription;
        
        /// <remarks/>
        public ProxyCertificateUsage CertificateUsage;
        
        /// <remarks/>
        public bool IsPartialExemption;
        
        /// <remarks/>
        public string ExemptReasonCode;
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/Jurisdiction/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "Jurisdiction")]
    [ComVisible(false)]
    public class ProxyJurisdiction
    {
        /// <remarks/>
        public string JurisdictionCode;
        
        /// <remarks/>
        public string Country;
        
        /// <remarks/>
        public DateTime ExpiryDate;
        
        /// <remarks/>
        public bool DoesNotExpire;
        
        /// <remarks/>
        public string[] PermitNumbers;
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/Customer/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "Customer")]
    [ComVisible(false)]
    public class ProxyCustomer
    {

        /// <remarks/>
        public string CompanyCode;

        /// <remarks/>
        public string CustomerCode;

        /// <remarks/>
        public string NewCustomerCode;

        /// <remarks/>
        public string ParentCustomerCode;

        /// <remarks/>
        public string CustomerType;

        /// <remarks/>
        public string CustomerName;

        /// <remarks/>
        public string Attn;

        /// <remarks/>
        public string Address1;

        /// <remarks/>
        public string Address2;

        /// <remarks/>
        public string City;

        /// <remarks/>
        public string Region;

        /// <remarks/>
        public string PostalCode;

        /// <remarks/>
        public string Country;

        /// <remarks/>
        public string Phone;

        /// <remarks/>
        public string Fax;

        /// <remarks/>
        public string Email;

    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/CommunicationMode/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "CommunicationMode")]
    [ComVisible(false)]
    public enum ProxyCommunicationMode
    {

        /// <remarks/>
        Email = 0,

        /// <remarks/>
        Mail = 1,

        /// <remarks/>
        Fax = 2

    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/RequestType/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "RequestType")]
    [ComVisible(false)]
    public enum ProxyRequestType
    {
        /// <remarks/>
        STANDARD = 0,

        /// <remarks/>
        DIRECT = 1
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/CertificateStatus/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "CertificateStatus")]
    [ComVisible(false)]
    public enum ProxyCertificateStatus
    {
        /// <remarks/>
        ACTIVE = 0,

        /// <remarks/>
        VOID = 1,

        /// <remarks/>
        INCOMPLETE = 2
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/ReviewStatus/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "ReviewStatus")]
    [ComVisible(false)]
    public enum ProxyReviewStatus
    {
        /// <remarks/>
        PENDING = 0,

        /// <remarks/>
        ACCEPTED = 1,

        /// <remarks/>
        REJECTED = 2
    }

    /// <include file='AvaCertSvcProxy.Doc.xml' path='adapter/proxy/CertificateUsage/*' />
    [XmlType(Namespace = "http://avatax.avalara.com/services", TypeName = "CertificateUsage")]
    [ComVisible(false)]
    public enum ProxyCertificateUsage
    {
        /// <remarks/>
        BLANKET = 0,

        /// <remarks/>
        SINGLE = 1,

        /// <remarks/>
        NULL = 2
    }
}
