#region Copyright
//
// All rights are reserved. Reproduction or transmission in whole or in part, in
// any form or by any means, electronic, mechanical or otherwise, is prohibited
// without the prior written consent of the copyright owner.
//
#endregion

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace Avalara.AvaTax.Adapter.Proxies.AddressSvcProxy
{
	/// <include file='AddressSvcProxy.Doc.xml' path='adapter/proxy/AddressSvcProxy/*' />
	[DebuggerStepThrough()]
	[DesignerCategory("code")]
	[WebServiceBinding(Name="AddressSvcSoap", Namespace="http://avatax.avalara.com/services")]
	[XmlInclude(typeof(ProxyBaseResult))]
	[ComVisible(false)]
	public class ProxyAddressSvc : SoapHttpClientProtocol
	{
                
		/// <remarks/>
		public ProxyProfile ProfileValue;
		/// <remarks/>
		public ProxySecurity Security;

		/// <remarks/>
		internal ProxyAddressSvc() 
		{
			//not publicly creatable
		}
		
		/// <remarks/>
		[SOAPTraceRequest]
		[SoapHeader("ProfileValue"), SoapHeader("Security")]
		[SoapDocumentMethod("http://avatax.avalara.com/services/Validate", RequestNamespace="http://avatax.avalara.com/services", ResponseNamespace="http://avatax.avalara.com/services", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
		public ProxyValidateResult Validate(ProxyValidateRequest ValidateRequest) 
		{
			object[] results = this.Invoke("Validate", new object[] {
																		ValidateRequest});
			return ((ProxyValidateResult)(results[0]));
		}
        
		/// <remarks/>
		public IAsyncResult BeginValidate(ProxyValidateRequest ValidateRequest, AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("Validate", new object[] {
																 ValidateRequest}, callback, asyncState);
		}
        
		/// <remarks/>
		public ProxyValidateResult EndValidate(IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ProxyValidateResult)(results[0]));
		}
        
		/// <remarks/>
		[SOAPTraceRequest]
		[SoapHeader("ProfileValue"), SoapHeader("Security")]
		[SoapDocumentMethod("http://avatax.avalara.com/services/Ping", RequestNamespace="http://avatax.avalara.com/services", ResponseNamespace="http://avatax.avalara.com/services", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
		public ProxyPingResult Ping(string Message) 
		{
			object[] results = this.Invoke("Ping", new object[] {
																	Message});
			return ((ProxyPingResult)(results[0]));
		}
        
		/// <remarks/>
		public IAsyncResult BeginPing(string Message, AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("Ping", new object[] {
															 Message}, callback, asyncState);
		}
        
		/// <remarks/>
		public ProxyPingResult EndPing(IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ProxyPingResult)(results[0]));
		}
        
		/// <remarks/>
		[SOAPTraceRequest]
		[SoapHeader("ProfileValue"), SoapHeader("Security")]
		[SoapDocumentMethod("http://avatax.avalara.com/services/IsAuthorized", RequestNamespace="http://avatax.avalara.com/services", ResponseNamespace="http://avatax.avalara.com/services", Use=SoapBindingUse.Literal, ParameterStyle=SoapParameterStyle.Wrapped)]
		public ProxyIsAuthorizedResult IsAuthorized(string Operations) 
		{
			object[] results = this.Invoke("IsAuthorized", new object[] {
																			Operations});
			return ((ProxyIsAuthorizedResult)(results[0]));
		}
        
		/// <remarks/>
		public IAsyncResult BeginIsAuthorized(string Operations, AsyncCallback callback, object asyncState) 
		{
			return this.BeginInvoke("IsAuthorized", new object[] {
																	 Operations}, callback, asyncState);
		}
        
		/// <remarks/>
		public ProxyIsAuthorizedResult EndIsAuthorized(IAsyncResult asyncResult) 
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((ProxyIsAuthorizedResult)(results[0]));
		}

	}

	/// <include file='AddressSvcProxy.Doc.xml' path='adapter/proxy/ValidateResult/*' />
	[XmlType(Namespace="http://avatax.avalara.com/services", TypeName="ValidateResult")]
	[ComVisible(false)]
	public class ProxyValidateResult : ProxyBaseResult 
	{
		/// <remarks/>
		public ProxyValidAddress[] ValidAddresses;
		
		/// <remarks/>
		public bool Taxable;
	}

	/// <include file='AddressSvcProxy.Doc.xml' path='adapter/proxy/ValidAddress/*' />
	[XmlType(Namespace="http://avatax.avalara.com/services", TypeName="ValidAddress")]
	[ComVisible(false)]
	public class ProxyValidAddress : ProxyBaseAddress 
	{
		/// <remarks/>
		public string Line4;
        
		/// <remarks/>
		public string County;
        
		/// <remarks/>
		public string FipsCode;
        
		/// <remarks/>
		public string CarrierRoute;
        
		/// <remarks/>
		public string PostNet;
        
		/// <remarks/>
		public string AddressType;

		/// <remarks/>
		public string Latitude;

		/// <remarks/>
		public string Longitude;
	}
    
	/// <remarks/>
	[XmlType(Namespace="http://avatax.avalara.com/services", TypeName="ValidateRequest")]
	[ComVisible(false)]
	public class ProxyValidateRequest : ProxyBaseRequest
	{
        
		/// <remarks/>
		public ProxyBaseAddress Address;
        
		/// <remarks/>
		public ProxyTextCase TextCase;

		/// <remarks/>
		public bool Coordinates;

		/// <remarks/>
		public bool Taxability;
	}


	/// <remarks/>
	[XmlType(Namespace="http://avatax.avalara.com/services", TypeName="TextCase")]
	[ComVisible(false)]
	public enum ProxyTextCase 
	{
        
		/// <remarks/>
		Default,
        
		/// <remarks/>
		Upper,
        
		/// <remarks/>
		Mixed,
	}
}
